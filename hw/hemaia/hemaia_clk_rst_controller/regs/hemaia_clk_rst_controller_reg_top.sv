// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module hemaia_clk_rst_controller_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output hemaia_clk_rst_controller_reg_pkg::hemaia_clk_rst_controller_reg2hw_t reg2hw, // Write
  input  hemaia_clk_rst_controller_reg_pkg::hemaia_clk_rst_controller_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import hemaia_clk_rst_controller_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic reset_register_reset_c0_qs;
  logic reset_register_reset_c0_wd;
  logic reset_register_reset_c0_we;
  logic reset_register_reset_c1_qs;
  logic reset_register_reset_c1_wd;
  logic reset_register_reset_c1_we;
  logic reset_register_reset_c2_qs;
  logic reset_register_reset_c2_wd;
  logic reset_register_reset_c2_we;
  logic reset_register_reset_c3_qs;
  logic reset_register_reset_c3_wd;
  logic reset_register_reset_c3_we;
  logic reset_register_reset_c4_qs;
  logic reset_register_reset_c4_wd;
  logic reset_register_reset_c4_we;
  logic reset_register_reset_c5_qs;
  logic reset_register_reset_c5_wd;
  logic reset_register_reset_c5_we;
  logic reset_register_reset_c6_qs;
  logic reset_register_reset_c6_wd;
  logic reset_register_reset_c6_we;
  logic reset_register_reset_c7_qs;
  logic reset_register_reset_c7_wd;
  logic reset_register_reset_c7_we;
  logic reset_register_reset_c8_qs;
  logic reset_register_reset_c8_wd;
  logic reset_register_reset_c8_we;
  logic reset_register_reset_c9_qs;
  logic reset_register_reset_c9_wd;
  logic reset_register_reset_c9_we;
  logic reset_register_reset_c10_qs;
  logic reset_register_reset_c10_wd;
  logic reset_register_reset_c10_we;
  logic reset_register_reset_c11_qs;
  logic reset_register_reset_c11_wd;
  logic reset_register_reset_c11_we;
  logic reset_register_reset_c12_qs;
  logic reset_register_reset_c12_wd;
  logic reset_register_reset_c12_we;
  logic reset_register_reset_c13_qs;
  logic reset_register_reset_c13_wd;
  logic reset_register_reset_c13_we;
  logic reset_register_reset_c14_qs;
  logic reset_register_reset_c14_wd;
  logic reset_register_reset_c14_we;
  logic reset_register_reset_c15_qs;
  logic reset_register_reset_c15_wd;
  logic reset_register_reset_c15_we;
  logic reset_register_reset_c16_qs;
  logic reset_register_reset_c16_wd;
  logic reset_register_reset_c16_we;
  logic reset_register_reset_c17_qs;
  logic reset_register_reset_c17_wd;
  logic reset_register_reset_c17_we;
  logic reset_register_reset_c18_qs;
  logic reset_register_reset_c18_wd;
  logic reset_register_reset_c18_we;
  logic reset_register_reset_c19_qs;
  logic reset_register_reset_c19_wd;
  logic reset_register_reset_c19_we;
  logic reset_register_reset_c20_qs;
  logic reset_register_reset_c20_wd;
  logic reset_register_reset_c20_we;
  logic reset_register_reset_c21_qs;
  logic reset_register_reset_c21_wd;
  logic reset_register_reset_c21_we;
  logic reset_register_reset_c22_qs;
  logic reset_register_reset_c22_wd;
  logic reset_register_reset_c22_we;
  logic reset_register_reset_c23_qs;
  logic reset_register_reset_c23_wd;
  logic reset_register_reset_c23_we;
  logic reset_register_reset_c24_qs;
  logic reset_register_reset_c24_wd;
  logic reset_register_reset_c24_we;
  logic reset_register_reset_c25_qs;
  logic reset_register_reset_c25_wd;
  logic reset_register_reset_c25_we;
  logic reset_register_reset_c26_qs;
  logic reset_register_reset_c26_wd;
  logic reset_register_reset_c26_we;
  logic reset_register_reset_c27_qs;
  logic reset_register_reset_c27_wd;
  logic reset_register_reset_c27_we;
  logic reset_register_reset_c28_qs;
  logic reset_register_reset_c28_wd;
  logic reset_register_reset_c28_we;
  logic reset_register_reset_c29_qs;
  logic reset_register_reset_c29_wd;
  logic reset_register_reset_c29_we;
  logic reset_register_reset_c30_qs;
  logic reset_register_reset_c30_wd;
  logic reset_register_reset_c30_we;
  logic reset_register_reset_c31_qs;
  logic reset_register_reset_c31_wd;
  logic reset_register_reset_c31_we;
  logic clock_valid_register_valid_c0_qs;
  logic clock_valid_register_valid_c0_wd;
  logic clock_valid_register_valid_c0_we;
  logic clock_valid_register_valid_c1_qs;
  logic clock_valid_register_valid_c1_wd;
  logic clock_valid_register_valid_c1_we;
  logic clock_valid_register_valid_c2_qs;
  logic clock_valid_register_valid_c2_wd;
  logic clock_valid_register_valid_c2_we;
  logic clock_valid_register_valid_c3_qs;
  logic clock_valid_register_valid_c3_wd;
  logic clock_valid_register_valid_c3_we;
  logic clock_valid_register_valid_c4_qs;
  logic clock_valid_register_valid_c4_wd;
  logic clock_valid_register_valid_c4_we;
  logic clock_valid_register_valid_c5_qs;
  logic clock_valid_register_valid_c5_wd;
  logic clock_valid_register_valid_c5_we;
  logic clock_valid_register_valid_c6_qs;
  logic clock_valid_register_valid_c6_wd;
  logic clock_valid_register_valid_c6_we;
  logic clock_valid_register_valid_c7_qs;
  logic clock_valid_register_valid_c7_wd;
  logic clock_valid_register_valid_c7_we;
  logic clock_valid_register_valid_c8_qs;
  logic clock_valid_register_valid_c8_wd;
  logic clock_valid_register_valid_c8_we;
  logic clock_valid_register_valid_c9_qs;
  logic clock_valid_register_valid_c9_wd;
  logic clock_valid_register_valid_c9_we;
  logic clock_valid_register_valid_c10_qs;
  logic clock_valid_register_valid_c10_wd;
  logic clock_valid_register_valid_c10_we;
  logic clock_valid_register_valid_c11_qs;
  logic clock_valid_register_valid_c11_wd;
  logic clock_valid_register_valid_c11_we;
  logic clock_valid_register_valid_c12_qs;
  logic clock_valid_register_valid_c12_wd;
  logic clock_valid_register_valid_c12_we;
  logic clock_valid_register_valid_c13_qs;
  logic clock_valid_register_valid_c13_wd;
  logic clock_valid_register_valid_c13_we;
  logic clock_valid_register_valid_c14_qs;
  logic clock_valid_register_valid_c14_wd;
  logic clock_valid_register_valid_c14_we;
  logic clock_valid_register_valid_c15_qs;
  logic clock_valid_register_valid_c15_wd;
  logic clock_valid_register_valid_c15_we;
  logic clock_valid_register_valid_c16_qs;
  logic clock_valid_register_valid_c16_wd;
  logic clock_valid_register_valid_c16_we;
  logic clock_valid_register_valid_c17_qs;
  logic clock_valid_register_valid_c17_wd;
  logic clock_valid_register_valid_c17_we;
  logic clock_valid_register_valid_c18_qs;
  logic clock_valid_register_valid_c18_wd;
  logic clock_valid_register_valid_c18_we;
  logic clock_valid_register_valid_c19_qs;
  logic clock_valid_register_valid_c19_wd;
  logic clock_valid_register_valid_c19_we;
  logic clock_valid_register_valid_c20_qs;
  logic clock_valid_register_valid_c20_wd;
  logic clock_valid_register_valid_c20_we;
  logic clock_valid_register_valid_c21_qs;
  logic clock_valid_register_valid_c21_wd;
  logic clock_valid_register_valid_c21_we;
  logic clock_valid_register_valid_c22_qs;
  logic clock_valid_register_valid_c22_wd;
  logic clock_valid_register_valid_c22_we;
  logic clock_valid_register_valid_c23_qs;
  logic clock_valid_register_valid_c23_wd;
  logic clock_valid_register_valid_c23_we;
  logic clock_valid_register_valid_c24_qs;
  logic clock_valid_register_valid_c24_wd;
  logic clock_valid_register_valid_c24_we;
  logic clock_valid_register_valid_c25_qs;
  logic clock_valid_register_valid_c25_wd;
  logic clock_valid_register_valid_c25_we;
  logic clock_valid_register_valid_c26_qs;
  logic clock_valid_register_valid_c26_wd;
  logic clock_valid_register_valid_c26_we;
  logic clock_valid_register_valid_c27_qs;
  logic clock_valid_register_valid_c27_wd;
  logic clock_valid_register_valid_c27_we;
  logic clock_valid_register_valid_c28_qs;
  logic clock_valid_register_valid_c28_wd;
  logic clock_valid_register_valid_c28_we;
  logic clock_valid_register_valid_c29_qs;
  logic clock_valid_register_valid_c29_wd;
  logic clock_valid_register_valid_c29_we;
  logic clock_valid_register_valid_c30_qs;
  logic clock_valid_register_valid_c30_wd;
  logic clock_valid_register_valid_c30_we;
  logic clock_valid_register_valid_c31_qs;
  logic clock_valid_register_valid_c31_wd;
  logic clock_valid_register_valid_c31_we;
  logic [7:0] clock_division_register_c0_c3_division_c0_qs;
  logic [7:0] clock_division_register_c0_c3_division_c0_wd;
  logic clock_division_register_c0_c3_division_c0_we;
  logic [7:0] clock_division_register_c0_c3_division_c1_qs;
  logic [7:0] clock_division_register_c0_c3_division_c1_wd;
  logic clock_division_register_c0_c3_division_c1_we;
  logic [7:0] clock_division_register_c0_c3_division_c2_qs;
  logic [7:0] clock_division_register_c0_c3_division_c2_wd;
  logic clock_division_register_c0_c3_division_c2_we;
  logic [7:0] clock_division_register_c0_c3_division_c3_qs;
  logic [7:0] clock_division_register_c0_c3_division_c3_wd;
  logic clock_division_register_c0_c3_division_c3_we;
  logic [7:0] clock_division_register_c4_c7_division_c4_qs;
  logic [7:0] clock_division_register_c4_c7_division_c4_wd;
  logic clock_division_register_c4_c7_division_c4_we;
  logic [7:0] clock_division_register_c4_c7_division_c5_qs;
  logic [7:0] clock_division_register_c4_c7_division_c5_wd;
  logic clock_division_register_c4_c7_division_c5_we;
  logic [7:0] clock_division_register_c4_c7_division_c6_qs;
  logic [7:0] clock_division_register_c4_c7_division_c6_wd;
  logic clock_division_register_c4_c7_division_c6_we;
  logic [7:0] clock_division_register_c4_c7_division_c7_qs;
  logic [7:0] clock_division_register_c4_c7_division_c7_wd;
  logic clock_division_register_c4_c7_division_c7_we;
  logic [7:0] clock_division_register_c8_c11_division_c8_qs;
  logic [7:0] clock_division_register_c8_c11_division_c8_wd;
  logic clock_division_register_c8_c11_division_c8_we;
  logic [7:0] clock_division_register_c8_c11_division_c9_qs;
  logic [7:0] clock_division_register_c8_c11_division_c9_wd;
  logic clock_division_register_c8_c11_division_c9_we;
  logic [7:0] clock_division_register_c8_c11_division_c10_qs;
  logic [7:0] clock_division_register_c8_c11_division_c10_wd;
  logic clock_division_register_c8_c11_division_c10_we;
  logic [7:0] clock_division_register_c8_c11_division_c11_qs;
  logic [7:0] clock_division_register_c8_c11_division_c11_wd;
  logic clock_division_register_c8_c11_division_c11_we;
  logic [7:0] clock_division_register_c12_c15_division_c12_qs;
  logic [7:0] clock_division_register_c12_c15_division_c12_wd;
  logic clock_division_register_c12_c15_division_c12_we;
  logic [7:0] clock_division_register_c12_c15_division_c13_qs;
  logic [7:0] clock_division_register_c12_c15_division_c13_wd;
  logic clock_division_register_c12_c15_division_c13_we;
  logic [7:0] clock_division_register_c12_c15_division_c14_qs;
  logic [7:0] clock_division_register_c12_c15_division_c14_wd;
  logic clock_division_register_c12_c15_division_c14_we;
  logic [7:0] clock_division_register_c12_c15_division_c15_qs;
  logic [7:0] clock_division_register_c12_c15_division_c15_wd;
  logic clock_division_register_c12_c15_division_c15_we;
  logic [7:0] clock_division_register_c16_c19_division_c16_qs;
  logic [7:0] clock_division_register_c16_c19_division_c16_wd;
  logic clock_division_register_c16_c19_division_c16_we;
  logic [7:0] clock_division_register_c16_c19_division_c17_qs;
  logic [7:0] clock_division_register_c16_c19_division_c17_wd;
  logic clock_division_register_c16_c19_division_c17_we;
  logic [7:0] clock_division_register_c16_c19_division_c18_qs;
  logic [7:0] clock_division_register_c16_c19_division_c18_wd;
  logic clock_division_register_c16_c19_division_c18_we;
  logic [7:0] clock_division_register_c16_c19_division_c19_qs;
  logic [7:0] clock_division_register_c16_c19_division_c19_wd;
  logic clock_division_register_c16_c19_division_c19_we;
  logic [7:0] clock_division_register_c20_c23_division_c20_qs;
  logic [7:0] clock_division_register_c20_c23_division_c20_wd;
  logic clock_division_register_c20_c23_division_c20_we;
  logic [7:0] clock_division_register_c20_c23_division_c21_qs;
  logic [7:0] clock_division_register_c20_c23_division_c21_wd;
  logic clock_division_register_c20_c23_division_c21_we;
  logic [7:0] clock_division_register_c20_c23_division_c22_qs;
  logic [7:0] clock_division_register_c20_c23_division_c22_wd;
  logic clock_division_register_c20_c23_division_c22_we;
  logic [7:0] clock_division_register_c20_c23_division_c23_qs;
  logic [7:0] clock_division_register_c20_c23_division_c23_wd;
  logic clock_division_register_c20_c23_division_c23_we;
  logic [7:0] clock_division_register_c24_c27_division_c24_qs;
  logic [7:0] clock_division_register_c24_c27_division_c24_wd;
  logic clock_division_register_c24_c27_division_c24_we;
  logic [7:0] clock_division_register_c24_c27_division_c25_qs;
  logic [7:0] clock_division_register_c24_c27_division_c25_wd;
  logic clock_division_register_c24_c27_division_c25_we;
  logic [7:0] clock_division_register_c24_c27_division_c26_qs;
  logic [7:0] clock_division_register_c24_c27_division_c26_wd;
  logic clock_division_register_c24_c27_division_c26_we;
  logic [7:0] clock_division_register_c24_c27_division_c27_qs;
  logic [7:0] clock_division_register_c24_c27_division_c27_wd;
  logic clock_division_register_c24_c27_division_c27_we;
  logic [7:0] clock_division_register_c28_c31_division_c28_qs;
  logic [7:0] clock_division_register_c28_c31_division_c28_wd;
  logic clock_division_register_c28_c31_division_c28_we;
  logic [7:0] clock_division_register_c28_c31_division_c29_qs;
  logic [7:0] clock_division_register_c28_c31_division_c29_wd;
  logic clock_division_register_c28_c31_division_c29_we;
  logic [7:0] clock_division_register_c28_c31_division_c30_qs;
  logic [7:0] clock_division_register_c28_c31_division_c30_wd;
  logic clock_division_register_c28_c31_division_c30_we;
  logic [7:0] clock_division_register_c28_c31_division_c31_qs;
  logic [7:0] clock_division_register_c28_c31_division_c31_wd;
  logic clock_division_register_c28_c31_division_c31_we;

  // Register instances
  // R[reset_register]: V(False)

  //   F[reset_c0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c0_we),
    .wd     (reset_register_reset_c0_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c0.de),
    .d      (hw2reg.reset_register.reset_c0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c0.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c0_qs)
  );


  //   F[reset_c1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c1_we),
    .wd     (reset_register_reset_c1_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c1.de),
    .d      (hw2reg.reset_register.reset_c1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c1.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c1_qs)
  );


  //   F[reset_c2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c2_we),
    .wd     (reset_register_reset_c2_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c2.de),
    .d      (hw2reg.reset_register.reset_c2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c2.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c2_qs)
  );


  //   F[reset_c3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c3_we),
    .wd     (reset_register_reset_c3_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c3.de),
    .d      (hw2reg.reset_register.reset_c3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c3.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c3_qs)
  );


  //   F[reset_c4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c4_we),
    .wd     (reset_register_reset_c4_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c4.de),
    .d      (hw2reg.reset_register.reset_c4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c4.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c4_qs)
  );


  //   F[reset_c5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c5_we),
    .wd     (reset_register_reset_c5_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c5.de),
    .d      (hw2reg.reset_register.reset_c5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c5.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c5_qs)
  );


  //   F[reset_c6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c6_we),
    .wd     (reset_register_reset_c6_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c6.de),
    .d      (hw2reg.reset_register.reset_c6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c6.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c6_qs)
  );


  //   F[reset_c7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c7_we),
    .wd     (reset_register_reset_c7_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c7.de),
    .d      (hw2reg.reset_register.reset_c7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c7.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c7_qs)
  );


  //   F[reset_c8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c8_we),
    .wd     (reset_register_reset_c8_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c8.de),
    .d      (hw2reg.reset_register.reset_c8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c8.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c8_qs)
  );


  //   F[reset_c9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c9_we),
    .wd     (reset_register_reset_c9_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c9.de),
    .d      (hw2reg.reset_register.reset_c9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c9.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c9_qs)
  );


  //   F[reset_c10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c10_we),
    .wd     (reset_register_reset_c10_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c10.de),
    .d      (hw2reg.reset_register.reset_c10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c10.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c10_qs)
  );


  //   F[reset_c11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c11_we),
    .wd     (reset_register_reset_c11_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c11.de),
    .d      (hw2reg.reset_register.reset_c11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c11.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c11_qs)
  );


  //   F[reset_c12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c12_we),
    .wd     (reset_register_reset_c12_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c12.de),
    .d      (hw2reg.reset_register.reset_c12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c12.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c12_qs)
  );


  //   F[reset_c13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c13_we),
    .wd     (reset_register_reset_c13_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c13.de),
    .d      (hw2reg.reset_register.reset_c13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c13.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c13_qs)
  );


  //   F[reset_c14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c14_we),
    .wd     (reset_register_reset_c14_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c14.de),
    .d      (hw2reg.reset_register.reset_c14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c14.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c14_qs)
  );


  //   F[reset_c15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c15_we),
    .wd     (reset_register_reset_c15_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c15.de),
    .d      (hw2reg.reset_register.reset_c15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c15.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c15_qs)
  );


  //   F[reset_c16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c16_we),
    .wd     (reset_register_reset_c16_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c16.de),
    .d      (hw2reg.reset_register.reset_c16.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c16.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c16_qs)
  );


  //   F[reset_c17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c17_we),
    .wd     (reset_register_reset_c17_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c17.de),
    .d      (hw2reg.reset_register.reset_c17.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c17.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c17_qs)
  );


  //   F[reset_c18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c18_we),
    .wd     (reset_register_reset_c18_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c18.de),
    .d      (hw2reg.reset_register.reset_c18.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c18.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c18_qs)
  );


  //   F[reset_c19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c19_we),
    .wd     (reset_register_reset_c19_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c19.de),
    .d      (hw2reg.reset_register.reset_c19.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c19.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c19_qs)
  );


  //   F[reset_c20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c20_we),
    .wd     (reset_register_reset_c20_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c20.de),
    .d      (hw2reg.reset_register.reset_c20.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c20.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c20_qs)
  );


  //   F[reset_c21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c21_we),
    .wd     (reset_register_reset_c21_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c21.de),
    .d      (hw2reg.reset_register.reset_c21.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c21.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c21_qs)
  );


  //   F[reset_c22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c22_we),
    .wd     (reset_register_reset_c22_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c22.de),
    .d      (hw2reg.reset_register.reset_c22.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c22.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c22_qs)
  );


  //   F[reset_c23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c23_we),
    .wd     (reset_register_reset_c23_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c23.de),
    .d      (hw2reg.reset_register.reset_c23.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c23.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c23_qs)
  );


  //   F[reset_c24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c24_we),
    .wd     (reset_register_reset_c24_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c24.de),
    .d      (hw2reg.reset_register.reset_c24.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c24.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c24_qs)
  );


  //   F[reset_c25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c25_we),
    .wd     (reset_register_reset_c25_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c25.de),
    .d      (hw2reg.reset_register.reset_c25.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c25.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c25_qs)
  );


  //   F[reset_c26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c26_we),
    .wd     (reset_register_reset_c26_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c26.de),
    .d      (hw2reg.reset_register.reset_c26.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c26.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c26_qs)
  );


  //   F[reset_c27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c27_we),
    .wd     (reset_register_reset_c27_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c27.de),
    .d      (hw2reg.reset_register.reset_c27.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c27.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c27_qs)
  );


  //   F[reset_c28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c28_we),
    .wd     (reset_register_reset_c28_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c28.de),
    .d      (hw2reg.reset_register.reset_c28.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c28.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c28_qs)
  );


  //   F[reset_c29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c29_we),
    .wd     (reset_register_reset_c29_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c29.de),
    .d      (hw2reg.reset_register.reset_c29.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c29.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c29_qs)
  );


  //   F[reset_c30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c30_we),
    .wd     (reset_register_reset_c30_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c30.de),
    .d      (hw2reg.reset_register.reset_c30.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c30.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c30_qs)
  );


  //   F[reset_c31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_reset_register_reset_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (reset_register_reset_c31_we),
    .wd     (reset_register_reset_c31_wd),

    // from internal hardware
    .de     (hw2reg.reset_register.reset_c31.de),
    .d      (hw2reg.reset_register.reset_c31.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.reset_register.reset_c31.q ),

    // to register interface (read)
    .qs     (reset_register_reset_c31_qs)
  );


  // R[clock_valid_register]: V(False)

  //   F[valid_c0]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c0_we),
    .wd     (clock_valid_register_valid_c0_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c0.de),
    .d      (hw2reg.clock_valid_register.valid_c0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c0.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c0_qs)
  );


  //   F[valid_c1]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c1_we),
    .wd     (clock_valid_register_valid_c1_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c1.de),
    .d      (hw2reg.clock_valid_register.valid_c1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c1.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c1_qs)
  );


  //   F[valid_c2]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c2_we),
    .wd     (clock_valid_register_valid_c2_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c2.de),
    .d      (hw2reg.clock_valid_register.valid_c2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c2.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c2_qs)
  );


  //   F[valid_c3]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c3_we),
    .wd     (clock_valid_register_valid_c3_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c3.de),
    .d      (hw2reg.clock_valid_register.valid_c3.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c3.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c3_qs)
  );


  //   F[valid_c4]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c4_we),
    .wd     (clock_valid_register_valid_c4_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c4.de),
    .d      (hw2reg.clock_valid_register.valid_c4.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c4.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c4_qs)
  );


  //   F[valid_c5]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c5_we),
    .wd     (clock_valid_register_valid_c5_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c5.de),
    .d      (hw2reg.clock_valid_register.valid_c5.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c5.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c5_qs)
  );


  //   F[valid_c6]: 6:6
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c6_we),
    .wd     (clock_valid_register_valid_c6_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c6.de),
    .d      (hw2reg.clock_valid_register.valid_c6.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c6.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c6_qs)
  );


  //   F[valid_c7]: 7:7
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c7_we),
    .wd     (clock_valid_register_valid_c7_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c7.de),
    .d      (hw2reg.clock_valid_register.valid_c7.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c7.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c7_qs)
  );


  //   F[valid_c8]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c8_we),
    .wd     (clock_valid_register_valid_c8_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c8.de),
    .d      (hw2reg.clock_valid_register.valid_c8.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c8.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c8_qs)
  );


  //   F[valid_c9]: 9:9
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c9_we),
    .wd     (clock_valid_register_valid_c9_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c9.de),
    .d      (hw2reg.clock_valid_register.valid_c9.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c9.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c9_qs)
  );


  //   F[valid_c10]: 10:10
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c10_we),
    .wd     (clock_valid_register_valid_c10_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c10.de),
    .d      (hw2reg.clock_valid_register.valid_c10.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c10.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c10_qs)
  );


  //   F[valid_c11]: 11:11
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c11_we),
    .wd     (clock_valid_register_valid_c11_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c11.de),
    .d      (hw2reg.clock_valid_register.valid_c11.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c11.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c11_qs)
  );


  //   F[valid_c12]: 12:12
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c12_we),
    .wd     (clock_valid_register_valid_c12_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c12.de),
    .d      (hw2reg.clock_valid_register.valid_c12.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c12.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c12_qs)
  );


  //   F[valid_c13]: 13:13
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c13_we),
    .wd     (clock_valid_register_valid_c13_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c13.de),
    .d      (hw2reg.clock_valid_register.valid_c13.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c13.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c13_qs)
  );


  //   F[valid_c14]: 14:14
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c14_we),
    .wd     (clock_valid_register_valid_c14_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c14.de),
    .d      (hw2reg.clock_valid_register.valid_c14.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c14.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c14_qs)
  );


  //   F[valid_c15]: 15:15
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c15_we),
    .wd     (clock_valid_register_valid_c15_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c15.de),
    .d      (hw2reg.clock_valid_register.valid_c15.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c15.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c15_qs)
  );


  //   F[valid_c16]: 16:16
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c16_we),
    .wd     (clock_valid_register_valid_c16_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c16.de),
    .d      (hw2reg.clock_valid_register.valid_c16.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c16.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c16_qs)
  );


  //   F[valid_c17]: 17:17
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c17_we),
    .wd     (clock_valid_register_valid_c17_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c17.de),
    .d      (hw2reg.clock_valid_register.valid_c17.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c17.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c17_qs)
  );


  //   F[valid_c18]: 18:18
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c18_we),
    .wd     (clock_valid_register_valid_c18_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c18.de),
    .d      (hw2reg.clock_valid_register.valid_c18.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c18.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c18_qs)
  );


  //   F[valid_c19]: 19:19
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c19_we),
    .wd     (clock_valid_register_valid_c19_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c19.de),
    .d      (hw2reg.clock_valid_register.valid_c19.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c19.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c19_qs)
  );


  //   F[valid_c20]: 20:20
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c20_we),
    .wd     (clock_valid_register_valid_c20_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c20.de),
    .d      (hw2reg.clock_valid_register.valid_c20.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c20.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c20_qs)
  );


  //   F[valid_c21]: 21:21
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c21_we),
    .wd     (clock_valid_register_valid_c21_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c21.de),
    .d      (hw2reg.clock_valid_register.valid_c21.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c21.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c21_qs)
  );


  //   F[valid_c22]: 22:22
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c22_we),
    .wd     (clock_valid_register_valid_c22_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c22.de),
    .d      (hw2reg.clock_valid_register.valid_c22.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c22.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c22_qs)
  );


  //   F[valid_c23]: 23:23
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c23_we),
    .wd     (clock_valid_register_valid_c23_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c23.de),
    .d      (hw2reg.clock_valid_register.valid_c23.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c23.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c23_qs)
  );


  //   F[valid_c24]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c24_we),
    .wd     (clock_valid_register_valid_c24_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c24.de),
    .d      (hw2reg.clock_valid_register.valid_c24.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c24.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c24_qs)
  );


  //   F[valid_c25]: 25:25
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c25_we),
    .wd     (clock_valid_register_valid_c25_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c25.de),
    .d      (hw2reg.clock_valid_register.valid_c25.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c25.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c25_qs)
  );


  //   F[valid_c26]: 26:26
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c26_we),
    .wd     (clock_valid_register_valid_c26_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c26.de),
    .d      (hw2reg.clock_valid_register.valid_c26.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c26.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c26_qs)
  );


  //   F[valid_c27]: 27:27
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c27_we),
    .wd     (clock_valid_register_valid_c27_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c27.de),
    .d      (hw2reg.clock_valid_register.valid_c27.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c27.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c27_qs)
  );


  //   F[valid_c28]: 28:28
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c28_we),
    .wd     (clock_valid_register_valid_c28_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c28.de),
    .d      (hw2reg.clock_valid_register.valid_c28.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c28.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c28_qs)
  );


  //   F[valid_c29]: 29:29
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c29_we),
    .wd     (clock_valid_register_valid_c29_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c29.de),
    .d      (hw2reg.clock_valid_register.valid_c29.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c29.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c29_qs)
  );


  //   F[valid_c30]: 30:30
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c30_we),
    .wd     (clock_valid_register_valid_c30_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c30.de),
    .d      (hw2reg.clock_valid_register.valid_c30.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c30.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c30_qs)
  );


  //   F[valid_c31]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clock_valid_register_valid_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_valid_register_valid_c31_we),
    .wd     (clock_valid_register_valid_c31_wd),

    // from internal hardware
    .de     (hw2reg.clock_valid_register.valid_c31.de),
    .d      (hw2reg.clock_valid_register.valid_c31.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_valid_register.valid_c31.q ),

    // to register interface (read)
    .qs     (clock_valid_register_valid_c31_qs)
  );


  // R[clock_division_register_c0_c3]: V(False)

  //   F[division_c0]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c0_c3_division_c0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c0_c3_division_c0_we),
    .wd     (clock_division_register_c0_c3_division_c0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c0_c3.division_c0.q ),

    // to register interface (read)
    .qs     (clock_division_register_c0_c3_division_c0_qs)
  );


  //   F[division_c1]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c0_c3_division_c1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c0_c3_division_c1_we),
    .wd     (clock_division_register_c0_c3_division_c1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c0_c3.division_c1.q ),

    // to register interface (read)
    .qs     (clock_division_register_c0_c3_division_c1_qs)
  );


  //   F[division_c2]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c0_c3_division_c2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c0_c3_division_c2_we),
    .wd     (clock_division_register_c0_c3_division_c2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c0_c3.division_c2.q ),

    // to register interface (read)
    .qs     (clock_division_register_c0_c3_division_c2_qs)
  );


  //   F[division_c3]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c0_c3_division_c3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c0_c3_division_c3_we),
    .wd     (clock_division_register_c0_c3_division_c3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c0_c3.division_c3.q ),

    // to register interface (read)
    .qs     (clock_division_register_c0_c3_division_c3_qs)
  );


  // R[clock_division_register_c4_c7]: V(False)

  //   F[division_c4]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c4_c7_division_c4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c4_c7_division_c4_we),
    .wd     (clock_division_register_c4_c7_division_c4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c4_c7.division_c4.q ),

    // to register interface (read)
    .qs     (clock_division_register_c4_c7_division_c4_qs)
  );


  //   F[division_c5]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c4_c7_division_c5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c4_c7_division_c5_we),
    .wd     (clock_division_register_c4_c7_division_c5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c4_c7.division_c5.q ),

    // to register interface (read)
    .qs     (clock_division_register_c4_c7_division_c5_qs)
  );


  //   F[division_c6]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c4_c7_division_c6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c4_c7_division_c6_we),
    .wd     (clock_division_register_c4_c7_division_c6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c4_c7.division_c6.q ),

    // to register interface (read)
    .qs     (clock_division_register_c4_c7_division_c6_qs)
  );


  //   F[division_c7]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c4_c7_division_c7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c4_c7_division_c7_we),
    .wd     (clock_division_register_c4_c7_division_c7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c4_c7.division_c7.q ),

    // to register interface (read)
    .qs     (clock_division_register_c4_c7_division_c7_qs)
  );


  // R[clock_division_register_c8_c11]: V(False)

  //   F[division_c8]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c8_c11_division_c8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c8_c11_division_c8_we),
    .wd     (clock_division_register_c8_c11_division_c8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c8_c11.division_c8.q ),

    // to register interface (read)
    .qs     (clock_division_register_c8_c11_division_c8_qs)
  );


  //   F[division_c9]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c8_c11_division_c9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c8_c11_division_c9_we),
    .wd     (clock_division_register_c8_c11_division_c9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c8_c11.division_c9.q ),

    // to register interface (read)
    .qs     (clock_division_register_c8_c11_division_c9_qs)
  );


  //   F[division_c10]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c8_c11_division_c10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c8_c11_division_c10_we),
    .wd     (clock_division_register_c8_c11_division_c10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c8_c11.division_c10.q ),

    // to register interface (read)
    .qs     (clock_division_register_c8_c11_division_c10_qs)
  );


  //   F[division_c11]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c8_c11_division_c11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c8_c11_division_c11_we),
    .wd     (clock_division_register_c8_c11_division_c11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c8_c11.division_c11.q ),

    // to register interface (read)
    .qs     (clock_division_register_c8_c11_division_c11_qs)
  );


  // R[clock_division_register_c12_c15]: V(False)

  //   F[division_c12]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c12_c15_division_c12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c12_c15_division_c12_we),
    .wd     (clock_division_register_c12_c15_division_c12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c12_c15.division_c12.q ),

    // to register interface (read)
    .qs     (clock_division_register_c12_c15_division_c12_qs)
  );


  //   F[division_c13]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c12_c15_division_c13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c12_c15_division_c13_we),
    .wd     (clock_division_register_c12_c15_division_c13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c12_c15.division_c13.q ),

    // to register interface (read)
    .qs     (clock_division_register_c12_c15_division_c13_qs)
  );


  //   F[division_c14]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c12_c15_division_c14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c12_c15_division_c14_we),
    .wd     (clock_division_register_c12_c15_division_c14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c12_c15.division_c14.q ),

    // to register interface (read)
    .qs     (clock_division_register_c12_c15_division_c14_qs)
  );


  //   F[division_c15]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c12_c15_division_c15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c12_c15_division_c15_we),
    .wd     (clock_division_register_c12_c15_division_c15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c12_c15.division_c15.q ),

    // to register interface (read)
    .qs     (clock_division_register_c12_c15_division_c15_qs)
  );


  // R[clock_division_register_c16_c19]: V(False)

  //   F[division_c16]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c16_c19_division_c16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c16_c19_division_c16_we),
    .wd     (clock_division_register_c16_c19_division_c16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c16_c19.division_c16.q ),

    // to register interface (read)
    .qs     (clock_division_register_c16_c19_division_c16_qs)
  );


  //   F[division_c17]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c16_c19_division_c17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c16_c19_division_c17_we),
    .wd     (clock_division_register_c16_c19_division_c17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c16_c19.division_c17.q ),

    // to register interface (read)
    .qs     (clock_division_register_c16_c19_division_c17_qs)
  );


  //   F[division_c18]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c16_c19_division_c18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c16_c19_division_c18_we),
    .wd     (clock_division_register_c16_c19_division_c18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c16_c19.division_c18.q ),

    // to register interface (read)
    .qs     (clock_division_register_c16_c19_division_c18_qs)
  );


  //   F[division_c19]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c16_c19_division_c19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c16_c19_division_c19_we),
    .wd     (clock_division_register_c16_c19_division_c19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c16_c19.division_c19.q ),

    // to register interface (read)
    .qs     (clock_division_register_c16_c19_division_c19_qs)
  );


  // R[clock_division_register_c20_c23]: V(False)

  //   F[division_c20]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c20_c23_division_c20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c20_c23_division_c20_we),
    .wd     (clock_division_register_c20_c23_division_c20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c20_c23.division_c20.q ),

    // to register interface (read)
    .qs     (clock_division_register_c20_c23_division_c20_qs)
  );


  //   F[division_c21]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c20_c23_division_c21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c20_c23_division_c21_we),
    .wd     (clock_division_register_c20_c23_division_c21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c20_c23.division_c21.q ),

    // to register interface (read)
    .qs     (clock_division_register_c20_c23_division_c21_qs)
  );


  //   F[division_c22]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c20_c23_division_c22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c20_c23_division_c22_we),
    .wd     (clock_division_register_c20_c23_division_c22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c20_c23.division_c22.q ),

    // to register interface (read)
    .qs     (clock_division_register_c20_c23_division_c22_qs)
  );


  //   F[division_c23]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c20_c23_division_c23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c20_c23_division_c23_we),
    .wd     (clock_division_register_c20_c23_division_c23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c20_c23.division_c23.q ),

    // to register interface (read)
    .qs     (clock_division_register_c20_c23_division_c23_qs)
  );


  // R[clock_division_register_c24_c27]: V(False)

  //   F[division_c24]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c24_c27_division_c24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c24_c27_division_c24_we),
    .wd     (clock_division_register_c24_c27_division_c24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c24_c27.division_c24.q ),

    // to register interface (read)
    .qs     (clock_division_register_c24_c27_division_c24_qs)
  );


  //   F[division_c25]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c24_c27_division_c25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c24_c27_division_c25_we),
    .wd     (clock_division_register_c24_c27_division_c25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c24_c27.division_c25.q ),

    // to register interface (read)
    .qs     (clock_division_register_c24_c27_division_c25_qs)
  );


  //   F[division_c26]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c24_c27_division_c26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c24_c27_division_c26_we),
    .wd     (clock_division_register_c24_c27_division_c26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c24_c27.division_c26.q ),

    // to register interface (read)
    .qs     (clock_division_register_c24_c27_division_c26_qs)
  );


  //   F[division_c27]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c24_c27_division_c27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c24_c27_division_c27_we),
    .wd     (clock_division_register_c24_c27_division_c27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c24_c27.division_c27.q ),

    // to register interface (read)
    .qs     (clock_division_register_c24_c27_division_c27_qs)
  );


  // R[clock_division_register_c28_c31]: V(False)

  //   F[division_c28]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c28_c31_division_c28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c28_c31_division_c28_we),
    .wd     (clock_division_register_c28_c31_division_c28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c28_c31.division_c28.q ),

    // to register interface (read)
    .qs     (clock_division_register_c28_c31_division_c28_qs)
  );


  //   F[division_c29]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c28_c31_division_c29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c28_c31_division_c29_we),
    .wd     (clock_division_register_c28_c31_division_c29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c28_c31.division_c29.q ),

    // to register interface (read)
    .qs     (clock_division_register_c28_c31_division_c29_qs)
  );


  //   F[division_c30]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c28_c31_division_c30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c28_c31_division_c30_we),
    .wd     (clock_division_register_c28_c31_division_c30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c28_c31.division_c30.q ),

    // to register interface (read)
    .qs     (clock_division_register_c28_c31_division_c30_qs)
  );


  //   F[division_c31]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_clock_division_register_c28_c31_division_c31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clock_division_register_c28_c31_division_c31_we),
    .wd     (clock_division_register_c28_c31_division_c31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clock_division_register_c28_c31.division_c31.q ),

    // to register interface (read)
    .qs     (clock_division_register_c28_c31_division_c31_qs)
  );




  logic [9:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_RESET_REGISTER_OFFSET);
    addr_hit[1] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_VALID_REGISTER_OFFSET);
    addr_hit[2] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C0_C3_OFFSET);
    addr_hit[3] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C4_C7_OFFSET);
    addr_hit[4] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C8_C11_OFFSET);
    addr_hit[5] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C12_C15_OFFSET);
    addr_hit[6] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C16_C19_OFFSET);
    addr_hit[7] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C20_C23_OFFSET);
    addr_hit[8] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C24_C27_OFFSET);
    addr_hit[9] = (reg_addr == HEMAIA_CLK_RST_CONTROLLER_CLOCK_DIVISION_REGISTER_C28_C31_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[7] & ~reg_be))) |
               (addr_hit[8] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[8] & ~reg_be))) |
               (addr_hit[9] & (|(HEMAIA_CLK_RST_CONTROLLER_PERMIT[9] & ~reg_be)))));
  end

  assign reset_register_reset_c0_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c0_wd = reg_wdata[0];

  assign reset_register_reset_c1_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c1_wd = reg_wdata[1];

  assign reset_register_reset_c2_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c2_wd = reg_wdata[2];

  assign reset_register_reset_c3_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c3_wd = reg_wdata[3];

  assign reset_register_reset_c4_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c4_wd = reg_wdata[4];

  assign reset_register_reset_c5_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c5_wd = reg_wdata[5];

  assign reset_register_reset_c6_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c6_wd = reg_wdata[6];

  assign reset_register_reset_c7_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c7_wd = reg_wdata[7];

  assign reset_register_reset_c8_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c8_wd = reg_wdata[8];

  assign reset_register_reset_c9_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c9_wd = reg_wdata[9];

  assign reset_register_reset_c10_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c10_wd = reg_wdata[10];

  assign reset_register_reset_c11_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c11_wd = reg_wdata[11];

  assign reset_register_reset_c12_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c12_wd = reg_wdata[12];

  assign reset_register_reset_c13_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c13_wd = reg_wdata[13];

  assign reset_register_reset_c14_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c14_wd = reg_wdata[14];

  assign reset_register_reset_c15_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c15_wd = reg_wdata[15];

  assign reset_register_reset_c16_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c16_wd = reg_wdata[16];

  assign reset_register_reset_c17_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c17_wd = reg_wdata[17];

  assign reset_register_reset_c18_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c18_wd = reg_wdata[18];

  assign reset_register_reset_c19_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c19_wd = reg_wdata[19];

  assign reset_register_reset_c20_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c20_wd = reg_wdata[20];

  assign reset_register_reset_c21_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c21_wd = reg_wdata[21];

  assign reset_register_reset_c22_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c22_wd = reg_wdata[22];

  assign reset_register_reset_c23_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c23_wd = reg_wdata[23];

  assign reset_register_reset_c24_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c24_wd = reg_wdata[24];

  assign reset_register_reset_c25_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c25_wd = reg_wdata[25];

  assign reset_register_reset_c26_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c26_wd = reg_wdata[26];

  assign reset_register_reset_c27_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c27_wd = reg_wdata[27];

  assign reset_register_reset_c28_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c28_wd = reg_wdata[28];

  assign reset_register_reset_c29_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c29_wd = reg_wdata[29];

  assign reset_register_reset_c30_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c30_wd = reg_wdata[30];

  assign reset_register_reset_c31_we = addr_hit[0] & reg_we & !reg_error;
  assign reset_register_reset_c31_wd = reg_wdata[31];

  assign clock_valid_register_valid_c0_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c0_wd = reg_wdata[0];

  assign clock_valid_register_valid_c1_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c1_wd = reg_wdata[1];

  assign clock_valid_register_valid_c2_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c2_wd = reg_wdata[2];

  assign clock_valid_register_valid_c3_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c3_wd = reg_wdata[3];

  assign clock_valid_register_valid_c4_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c4_wd = reg_wdata[4];

  assign clock_valid_register_valid_c5_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c5_wd = reg_wdata[5];

  assign clock_valid_register_valid_c6_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c6_wd = reg_wdata[6];

  assign clock_valid_register_valid_c7_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c7_wd = reg_wdata[7];

  assign clock_valid_register_valid_c8_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c8_wd = reg_wdata[8];

  assign clock_valid_register_valid_c9_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c9_wd = reg_wdata[9];

  assign clock_valid_register_valid_c10_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c10_wd = reg_wdata[10];

  assign clock_valid_register_valid_c11_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c11_wd = reg_wdata[11];

  assign clock_valid_register_valid_c12_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c12_wd = reg_wdata[12];

  assign clock_valid_register_valid_c13_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c13_wd = reg_wdata[13];

  assign clock_valid_register_valid_c14_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c14_wd = reg_wdata[14];

  assign clock_valid_register_valid_c15_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c15_wd = reg_wdata[15];

  assign clock_valid_register_valid_c16_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c16_wd = reg_wdata[16];

  assign clock_valid_register_valid_c17_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c17_wd = reg_wdata[17];

  assign clock_valid_register_valid_c18_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c18_wd = reg_wdata[18];

  assign clock_valid_register_valid_c19_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c19_wd = reg_wdata[19];

  assign clock_valid_register_valid_c20_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c20_wd = reg_wdata[20];

  assign clock_valid_register_valid_c21_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c21_wd = reg_wdata[21];

  assign clock_valid_register_valid_c22_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c22_wd = reg_wdata[22];

  assign clock_valid_register_valid_c23_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c23_wd = reg_wdata[23];

  assign clock_valid_register_valid_c24_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c24_wd = reg_wdata[24];

  assign clock_valid_register_valid_c25_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c25_wd = reg_wdata[25];

  assign clock_valid_register_valid_c26_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c26_wd = reg_wdata[26];

  assign clock_valid_register_valid_c27_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c27_wd = reg_wdata[27];

  assign clock_valid_register_valid_c28_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c28_wd = reg_wdata[28];

  assign clock_valid_register_valid_c29_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c29_wd = reg_wdata[29];

  assign clock_valid_register_valid_c30_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c30_wd = reg_wdata[30];

  assign clock_valid_register_valid_c31_we = addr_hit[1] & reg_we & !reg_error;
  assign clock_valid_register_valid_c31_wd = reg_wdata[31];

  assign clock_division_register_c0_c3_division_c0_we = addr_hit[2] & reg_we & !reg_error;
  assign clock_division_register_c0_c3_division_c0_wd = reg_wdata[7:0];

  assign clock_division_register_c0_c3_division_c1_we = addr_hit[2] & reg_we & !reg_error;
  assign clock_division_register_c0_c3_division_c1_wd = reg_wdata[15:8];

  assign clock_division_register_c0_c3_division_c2_we = addr_hit[2] & reg_we & !reg_error;
  assign clock_division_register_c0_c3_division_c2_wd = reg_wdata[23:16];

  assign clock_division_register_c0_c3_division_c3_we = addr_hit[2] & reg_we & !reg_error;
  assign clock_division_register_c0_c3_division_c3_wd = reg_wdata[31:24];

  assign clock_division_register_c4_c7_division_c4_we = addr_hit[3] & reg_we & !reg_error;
  assign clock_division_register_c4_c7_division_c4_wd = reg_wdata[7:0];

  assign clock_division_register_c4_c7_division_c5_we = addr_hit[3] & reg_we & !reg_error;
  assign clock_division_register_c4_c7_division_c5_wd = reg_wdata[15:8];

  assign clock_division_register_c4_c7_division_c6_we = addr_hit[3] & reg_we & !reg_error;
  assign clock_division_register_c4_c7_division_c6_wd = reg_wdata[23:16];

  assign clock_division_register_c4_c7_division_c7_we = addr_hit[3] & reg_we & !reg_error;
  assign clock_division_register_c4_c7_division_c7_wd = reg_wdata[31:24];

  assign clock_division_register_c8_c11_division_c8_we = addr_hit[4] & reg_we & !reg_error;
  assign clock_division_register_c8_c11_division_c8_wd = reg_wdata[7:0];

  assign clock_division_register_c8_c11_division_c9_we = addr_hit[4] & reg_we & !reg_error;
  assign clock_division_register_c8_c11_division_c9_wd = reg_wdata[15:8];

  assign clock_division_register_c8_c11_division_c10_we = addr_hit[4] & reg_we & !reg_error;
  assign clock_division_register_c8_c11_division_c10_wd = reg_wdata[23:16];

  assign clock_division_register_c8_c11_division_c11_we = addr_hit[4] & reg_we & !reg_error;
  assign clock_division_register_c8_c11_division_c11_wd = reg_wdata[31:24];

  assign clock_division_register_c12_c15_division_c12_we = addr_hit[5] & reg_we & !reg_error;
  assign clock_division_register_c12_c15_division_c12_wd = reg_wdata[7:0];

  assign clock_division_register_c12_c15_division_c13_we = addr_hit[5] & reg_we & !reg_error;
  assign clock_division_register_c12_c15_division_c13_wd = reg_wdata[15:8];

  assign clock_division_register_c12_c15_division_c14_we = addr_hit[5] & reg_we & !reg_error;
  assign clock_division_register_c12_c15_division_c14_wd = reg_wdata[23:16];

  assign clock_division_register_c12_c15_division_c15_we = addr_hit[5] & reg_we & !reg_error;
  assign clock_division_register_c12_c15_division_c15_wd = reg_wdata[31:24];

  assign clock_division_register_c16_c19_division_c16_we = addr_hit[6] & reg_we & !reg_error;
  assign clock_division_register_c16_c19_division_c16_wd = reg_wdata[7:0];

  assign clock_division_register_c16_c19_division_c17_we = addr_hit[6] & reg_we & !reg_error;
  assign clock_division_register_c16_c19_division_c17_wd = reg_wdata[15:8];

  assign clock_division_register_c16_c19_division_c18_we = addr_hit[6] & reg_we & !reg_error;
  assign clock_division_register_c16_c19_division_c18_wd = reg_wdata[23:16];

  assign clock_division_register_c16_c19_division_c19_we = addr_hit[6] & reg_we & !reg_error;
  assign clock_division_register_c16_c19_division_c19_wd = reg_wdata[31:24];

  assign clock_division_register_c20_c23_division_c20_we = addr_hit[7] & reg_we & !reg_error;
  assign clock_division_register_c20_c23_division_c20_wd = reg_wdata[7:0];

  assign clock_division_register_c20_c23_division_c21_we = addr_hit[7] & reg_we & !reg_error;
  assign clock_division_register_c20_c23_division_c21_wd = reg_wdata[15:8];

  assign clock_division_register_c20_c23_division_c22_we = addr_hit[7] & reg_we & !reg_error;
  assign clock_division_register_c20_c23_division_c22_wd = reg_wdata[23:16];

  assign clock_division_register_c20_c23_division_c23_we = addr_hit[7] & reg_we & !reg_error;
  assign clock_division_register_c20_c23_division_c23_wd = reg_wdata[31:24];

  assign clock_division_register_c24_c27_division_c24_we = addr_hit[8] & reg_we & !reg_error;
  assign clock_division_register_c24_c27_division_c24_wd = reg_wdata[7:0];

  assign clock_division_register_c24_c27_division_c25_we = addr_hit[8] & reg_we & !reg_error;
  assign clock_division_register_c24_c27_division_c25_wd = reg_wdata[15:8];

  assign clock_division_register_c24_c27_division_c26_we = addr_hit[8] & reg_we & !reg_error;
  assign clock_division_register_c24_c27_division_c26_wd = reg_wdata[23:16];

  assign clock_division_register_c24_c27_division_c27_we = addr_hit[8] & reg_we & !reg_error;
  assign clock_division_register_c24_c27_division_c27_wd = reg_wdata[31:24];

  assign clock_division_register_c28_c31_division_c28_we = addr_hit[9] & reg_we & !reg_error;
  assign clock_division_register_c28_c31_division_c28_wd = reg_wdata[7:0];

  assign clock_division_register_c28_c31_division_c29_we = addr_hit[9] & reg_we & !reg_error;
  assign clock_division_register_c28_c31_division_c29_wd = reg_wdata[15:8];

  assign clock_division_register_c28_c31_division_c30_we = addr_hit[9] & reg_we & !reg_error;
  assign clock_division_register_c28_c31_division_c30_wd = reg_wdata[23:16];

  assign clock_division_register_c28_c31_division_c31_we = addr_hit[9] & reg_we & !reg_error;
  assign clock_division_register_c28_c31_division_c31_wd = reg_wdata[31:24];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = reset_register_reset_c0_qs;
        reg_rdata_next[1] = reset_register_reset_c1_qs;
        reg_rdata_next[2] = reset_register_reset_c2_qs;
        reg_rdata_next[3] = reset_register_reset_c3_qs;
        reg_rdata_next[4] = reset_register_reset_c4_qs;
        reg_rdata_next[5] = reset_register_reset_c5_qs;
        reg_rdata_next[6] = reset_register_reset_c6_qs;
        reg_rdata_next[7] = reset_register_reset_c7_qs;
        reg_rdata_next[8] = reset_register_reset_c8_qs;
        reg_rdata_next[9] = reset_register_reset_c9_qs;
        reg_rdata_next[10] = reset_register_reset_c10_qs;
        reg_rdata_next[11] = reset_register_reset_c11_qs;
        reg_rdata_next[12] = reset_register_reset_c12_qs;
        reg_rdata_next[13] = reset_register_reset_c13_qs;
        reg_rdata_next[14] = reset_register_reset_c14_qs;
        reg_rdata_next[15] = reset_register_reset_c15_qs;
        reg_rdata_next[16] = reset_register_reset_c16_qs;
        reg_rdata_next[17] = reset_register_reset_c17_qs;
        reg_rdata_next[18] = reset_register_reset_c18_qs;
        reg_rdata_next[19] = reset_register_reset_c19_qs;
        reg_rdata_next[20] = reset_register_reset_c20_qs;
        reg_rdata_next[21] = reset_register_reset_c21_qs;
        reg_rdata_next[22] = reset_register_reset_c22_qs;
        reg_rdata_next[23] = reset_register_reset_c23_qs;
        reg_rdata_next[24] = reset_register_reset_c24_qs;
        reg_rdata_next[25] = reset_register_reset_c25_qs;
        reg_rdata_next[26] = reset_register_reset_c26_qs;
        reg_rdata_next[27] = reset_register_reset_c27_qs;
        reg_rdata_next[28] = reset_register_reset_c28_qs;
        reg_rdata_next[29] = reset_register_reset_c29_qs;
        reg_rdata_next[30] = reset_register_reset_c30_qs;
        reg_rdata_next[31] = reset_register_reset_c31_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = clock_valid_register_valid_c0_qs;
        reg_rdata_next[1] = clock_valid_register_valid_c1_qs;
        reg_rdata_next[2] = clock_valid_register_valid_c2_qs;
        reg_rdata_next[3] = clock_valid_register_valid_c3_qs;
        reg_rdata_next[4] = clock_valid_register_valid_c4_qs;
        reg_rdata_next[5] = clock_valid_register_valid_c5_qs;
        reg_rdata_next[6] = clock_valid_register_valid_c6_qs;
        reg_rdata_next[7] = clock_valid_register_valid_c7_qs;
        reg_rdata_next[8] = clock_valid_register_valid_c8_qs;
        reg_rdata_next[9] = clock_valid_register_valid_c9_qs;
        reg_rdata_next[10] = clock_valid_register_valid_c10_qs;
        reg_rdata_next[11] = clock_valid_register_valid_c11_qs;
        reg_rdata_next[12] = clock_valid_register_valid_c12_qs;
        reg_rdata_next[13] = clock_valid_register_valid_c13_qs;
        reg_rdata_next[14] = clock_valid_register_valid_c14_qs;
        reg_rdata_next[15] = clock_valid_register_valid_c15_qs;
        reg_rdata_next[16] = clock_valid_register_valid_c16_qs;
        reg_rdata_next[17] = clock_valid_register_valid_c17_qs;
        reg_rdata_next[18] = clock_valid_register_valid_c18_qs;
        reg_rdata_next[19] = clock_valid_register_valid_c19_qs;
        reg_rdata_next[20] = clock_valid_register_valid_c20_qs;
        reg_rdata_next[21] = clock_valid_register_valid_c21_qs;
        reg_rdata_next[22] = clock_valid_register_valid_c22_qs;
        reg_rdata_next[23] = clock_valid_register_valid_c23_qs;
        reg_rdata_next[24] = clock_valid_register_valid_c24_qs;
        reg_rdata_next[25] = clock_valid_register_valid_c25_qs;
        reg_rdata_next[26] = clock_valid_register_valid_c26_qs;
        reg_rdata_next[27] = clock_valid_register_valid_c27_qs;
        reg_rdata_next[28] = clock_valid_register_valid_c28_qs;
        reg_rdata_next[29] = clock_valid_register_valid_c29_qs;
        reg_rdata_next[30] = clock_valid_register_valid_c30_qs;
        reg_rdata_next[31] = clock_valid_register_valid_c31_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[7:0] = clock_division_register_c0_c3_division_c0_qs;
        reg_rdata_next[15:8] = clock_division_register_c0_c3_division_c1_qs;
        reg_rdata_next[23:16] = clock_division_register_c0_c3_division_c2_qs;
        reg_rdata_next[31:24] = clock_division_register_c0_c3_division_c3_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[7:0] = clock_division_register_c4_c7_division_c4_qs;
        reg_rdata_next[15:8] = clock_division_register_c4_c7_division_c5_qs;
        reg_rdata_next[23:16] = clock_division_register_c4_c7_division_c6_qs;
        reg_rdata_next[31:24] = clock_division_register_c4_c7_division_c7_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[7:0] = clock_division_register_c8_c11_division_c8_qs;
        reg_rdata_next[15:8] = clock_division_register_c8_c11_division_c9_qs;
        reg_rdata_next[23:16] = clock_division_register_c8_c11_division_c10_qs;
        reg_rdata_next[31:24] = clock_division_register_c8_c11_division_c11_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[7:0] = clock_division_register_c12_c15_division_c12_qs;
        reg_rdata_next[15:8] = clock_division_register_c12_c15_division_c13_qs;
        reg_rdata_next[23:16] = clock_division_register_c12_c15_division_c14_qs;
        reg_rdata_next[31:24] = clock_division_register_c12_c15_division_c15_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = clock_division_register_c16_c19_division_c16_qs;
        reg_rdata_next[15:8] = clock_division_register_c16_c19_division_c17_qs;
        reg_rdata_next[23:16] = clock_division_register_c16_c19_division_c18_qs;
        reg_rdata_next[31:24] = clock_division_register_c16_c19_division_c19_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[7:0] = clock_division_register_c20_c23_division_c20_qs;
        reg_rdata_next[15:8] = clock_division_register_c20_c23_division_c21_qs;
        reg_rdata_next[23:16] = clock_division_register_c20_c23_division_c22_qs;
        reg_rdata_next[31:24] = clock_division_register_c20_c23_division_c23_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[7:0] = clock_division_register_c24_c27_division_c24_qs;
        reg_rdata_next[15:8] = clock_division_register_c24_c27_division_c25_qs;
        reg_rdata_next[23:16] = clock_division_register_c24_c27_division_c26_qs;
        reg_rdata_next[31:24] = clock_division_register_c24_c27_division_c27_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[7:0] = clock_division_register_c28_c31_division_c28_qs;
        reg_rdata_next[15:8] = clock_division_register_c28_c31_division_c29_qs;
        reg_rdata_next[23:16] = clock_division_register_c28_c31_division_c30_qs;
        reg_rdata_next[31:24] = clock_division_register_c28_c31_division_c31_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module hemaia_clk_rst_controller_reg_top_intf
#(
  parameter int AW = 6,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output hemaia_clk_rst_controller_reg_pkg::hemaia_clk_rst_controller_reg2hw_t reg2hw, // Write
  input  hemaia_clk_rst_controller_reg_pkg::hemaia_clk_rst_controller_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  hemaia_clk_rst_controller_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


