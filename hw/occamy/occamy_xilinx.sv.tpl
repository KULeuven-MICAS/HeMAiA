// Copyright 2020 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// Author: Nils Wistoff <nwistoff@iis.ee.ethz.ch>
//
// AUTOMATICALLY GENERATED by genoccamy.py; edit the script instead.

`include "axi_flat.sv"

module ${name}_xilinx
import ${name}_pkg::*;
 (
  input  logic        clk_i,
  input  logic        rst_ni,
  /// Peripheral clock
  input  logic        clk_periph_i,
  input  logic        rst_periph_ni,
  /// Real-time clock (for time keeping)
  input  logic        rtc_i,
  input  logic        test_mode_i,
  input  logic [1:0]  chip_id_i,
  input  logic [1:0]  boot_mode_i,
  // `uart` Interface
  output logic        uart_tx_o,
  input  logic        uart_rx_i,
  output logic        uart_rts_no, 
  input  logic        uart_cts_ni, 
  // `gpio` Interface
  input  logic [31:0] gpio_d_i,
  output logic [31:0] gpio_d_o,
  output logic [31:0] gpio_oe_o,
  // `jtag` Interface
  input  logic        jtag_trst_ni,
  input  logic        jtag_tck_i,
  input  logic        jtag_tms_i,
  input  logic        jtag_tdi_i,
  output logic        jtag_tdo_o,
  // `i2c` Interface
  inout  logic        i2c_sda_io,
  inout  logic        i2c_scl_io,
  // `SPI Host` Interface
  output logic        spim_sck_o,
  output logic [1:0]  spim_csb_o,
  inout  logic [3:0]  spim_sd_io,

  input  logic [11:0] ext_irq_i,

  // Boot ROM
  output logic        bootrom_en_o,
  // This is actually too wide. But the address width depends on the ROM size, so let Vivado handle
  // this for now
  output logic [47:0] bootrom_addr_o,
  input  logic [31:0] bootrom_data_i,

  // SPM / SRAM as the main memory
  ${soc_wide_xbar.out_spm_wide.emit_flat_master_port("ram")}
);

  // AXI ports of Occamy top-level

  /////////////////////////
  // SRAM as main memory //
  /////////////////////////

  ${soc_wide_xbar.out_spm_wide.req_type()} spm_axi_wide_req_o;
  ${soc_wide_xbar.out_spm_wide.rsp_type()} spm_axi_wide_rsp_i;

  // Assign structs to flattened ports
  `AXI_FLATTEN_MASTER(ram, spm_axi_wide_req_o, spm_axi_wide_rsp_i)

  ///////////////////
  // Boot ROM      //
  ///////////////////
  // TODO(niwis, aottaviano) This is a temporary solution. Either put this in a dedicated module for
  // regbus <-> Xilinx memory conversion and add support to solder, or replace by a different ROM

  ${soc_axi_lite_narrow_periph_xbar.out_bootrom.req_type()} bootrom_axi_lite_req;
  ${soc_axi_lite_narrow_periph_xbar.out_bootrom.rsp_type()} bootrom_axi_lite_rsp;

  <% regbus_bootrom = soc_axi_lite_narrow_periph_xbar.out_bootrom.to_reg(context, "bootrom", fr="bootrom_axi_lite") %>

  logic bootrom_req_ready_d, bootrom_req_ready_q;

  assign bootrom_en_o        = bootrom_req.valid;
  assign bootrom_addr_o      = bootrom_req.addr;
  assign bootrom_rsp.ready   = bootrom_req_ready_q;
  assign bootrom_rsp.rdata   = bootrom_data_i;
  assign bootrom_rsp.error   = '0;
  assign bootrom_req_ready_d = bootrom_req.valid & ~bootrom_req_ready_q;

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      bootrom_req_ready_q <= 1'b0;
    end else begin
      bootrom_req_ready_q <= bootrom_req_ready_d;
    end
  end


  // Occamy top-level
  ${name}_top i_${name} (
    .bootrom_req_o   (bootrom_axi_lite_req),
    .bootrom_rsp_i   (bootrom_axi_lite_rsp),
    .ext_irq_i(ext_irq_i),
    // Tie-off unused ports
    .chip_ctrl_rsp_i ('0),
    .sram_cfgs_i ('0),
    .*
  );

endmodule
